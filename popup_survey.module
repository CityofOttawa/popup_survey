<?php

/**
 * @file
 * Code for the Popup Survey feature.
 */

use Drupal\Component\Utility\Html;

/**
 * Shows this popup on every page except the listed pages.
 */
define('POPUP_VISIBILITY_NOTLISTED', 0);

/**
 * Shows this block on only the listed pages.
 */
define('POPUP_VISIBILITY_LISTED', 1);

/**
 * Implements hook_page_bottom().
 */
function popup_survey_page_bottom(array &$page_bottom) {
  // Performance: Skip this entirely for AJAX requests.
  if (\Drupal::request()->isXmlHttpRequest()) {
    return;
  }

  // Skip this if the visitor is logged in or determined to be a crawler.
  $current_user = \Drupal::currentUser();
  if ($current_user->isAuthenticated()) {
    return;
  }

  $config = \Drupal::configFactory()->get('popup_survey.settings');
  // Skip if the popup survey config entity to display is not set.
  $popup_config_entity_id = $config->get('popup_survey_config_entity');
  if ($popup_config_entity_id != FALSE) {
    // Randomly skip so that not all users see the popup.
    $frequency = $config->get('popup_survey_frequency') ?: 1;
    if (mt_rand(1, $frequency) === 1) {

      // Limited visibility popups must list at least one page.
      $visibility = $config->get('popup_survey_visibility_options');
      $visibility_pages = $config->get('popup_survey_visibility_options_pages') ?: '';

      if ($visibility === POPUP_VISIBILITY_LISTED && $visibility_pages == '') {
        return;
      }

      if ($visibility_pages) {
        $pages = strtolower($visibility_pages);
        $path = strtolower(\Drupal::service('path.current')->getPath());
        // Strip forward slash prefix from current page path.
        $path = preg_replace('/^\/(.*)/', '$1', $path);
        $page_match = \Drupal::service('path.matcher')->matchPath($path, $pages);
        $page_match = !($visibility xor $page_match);

        if (!$page_match) {
          return;
        }
      }

      $ua = Html::escape($config->get('popup_survey_ua_exclude') ?: '');
      $page_bottom['popup_survey'] = [
        '#theme' => 'popup_survey',
        '#attached' => [
          'library' => [
            'popup_survey/popup_survey',
          ],
          'drupalSettings' => [
            'popup_survey' => [
              'botlist' => $ua,
            ],
          ],
        ],
      ];
      $options = ['every_page' => TRUE];
    }
  }
}

/**
 * Implements template_preprocess_HOOK().
 */
function popup_survey_preprocess_popup_survey(&$variables) {
  $config = \Drupal::configFactory()->get('popup_survey.settings');
  // Skip this if the popup survey config entity to display is not set.
  $popup_config_entity_id = $config->get('popup_survey_config_entity');
  if ($popup_config_entity_id != FALSE) {
    $current_language = \Drupal::languageManager()->getCurrentLanguage();
    \Drupal::languageManager()->setConfigOverrideLanguage($current_language);
    $popup_survey = \Drupal::entityTypeManager()->getStorage('popup_survey')->load($popup_config_entity_id);
    if (!empty($popup_survey)) {
      $variables['cancel_link_title'] = $popup_survey->cancelLinkTitle();
      $variables['popup_body'] = $popup_survey->popupBody();
      $variables['popup_title'] = $popup_survey->label();
      $variables['survey_link'] = $popup_survey->surveyLink();
      $variables['survey_link_title'] = $popup_survey->surveyLinkTitle();
      $variables['render'] = TRUE;
    }
  }
}

/**
 * Implements hook_theme().
 */
function popup_survey_theme($existing, $type, $theme, $path) {
  return [
    'popup_survey' => [
      'variables' => [
        // By default don't render. Render if popup survey config entity exists.
        'render' => FALSE,
      ],
    ],
  ];
}
