<?php

/**
 * @file
 * Code for the Popup Survey feature.
 */

use Drupal\Component\Utility\Html;
use Drupal\popup_survey\PopupSurveyInterface;

/**
 * Implements hook_page_bottom().
 */
function popup_survey_page_bottom(array &$page_bottom) {
  // Performance: Skip this entirely for AJAX requests.
  if (\Drupal::request()->isXmlHttpRequest()) {
    return;
  }

  // Skip this if the visitor is logged in or determined to be a crawler.
  $current_user = \Drupal::currentUser();
  if ($current_user->isAuthenticated()) {
    return;
  }

  $config = \Drupal::configFactory()->get('popup_survey.settings');
  // Skip if the popup survey config entity to display is not set.
  $popup_config_entity_id = $config->get('popup_survey_config_entity');
  $frequency_override = NULL;

  // Check if surveys are enabled at all.
  if ($popup_config_entity_id != FALSE) {

    // Limited visibility popups must list at least one page.
    $visibility = $config->get('popup_survey_visibility_options');
    $visibility_pages = $config->get('popup_survey_visibility_options_pages') ?: '';

    if ($visibility === PopupSurveyInterface::POPUP_SURVEY_VISIBILITY_LISTED && $visibility_pages == '') {
      return;
    }

    // Get the current aliased path.
    $path = strtolower(\Drupal::service('path.current')->getPath());
    $current_path_alias = $path = \Drupal::service('path_alias.manager')->getAliasByPath($path);
    // Strip forward slash prefix from current page path.
    $current_path_alias = preg_replace('/^\/(.*)/', '$1', $current_path_alias);
    if ($visibility_pages) {
      $pages = strtolower($visibility_pages);
      // Strip forward slash prefix from current page path.
      $page_match = \Drupal::service('path.matcher')->matchPath($current_path_alias, $pages);
      $page_match = !($visibility xor $page_match);

      if (!$page_match) {
        return;
      }
    }

    // Lastly, check for any config entities which would override at this
    // path.
    $surveys = \Drupal::entityTypeManager()->getStorage('popup_survey')->loadByProperties(['visibility_override' => TRUE]);
    foreach ($surveys as $survey) {
      if (!empty($survey->visibilityOverridePages())) {
        $pages = strtolower($survey->visibilityOverridePages());
        $page_match = \Drupal::service('path.matcher')->matchPath($current_path_alias, $pages);

        // Break on the first survey which matches.
        if ($page_match) {
          $frequency_override = $survey->frequencyOverride();
          $popup_config_entity_id = $survey->id();
          break;
        }
      }
    }

    // Randomly skip so that not all users see the popup.
    $frequency = $frequency_override ?? $config->get('popup_survey_frequency') ?: 1;
    $ua = Html::escape($config->get('popup_survey_ua_exclude') ?: '');
    $page_bottom['popup_survey'] = [
      '#theme' => 'popup_survey',
      '#survey_id' => $popup_config_entity_id,
      '#attached' => [
        'library' => [
          'popup_survey/popup_survey',
        ],
        'drupalSettings' => [
          'popup_survey' => [
            'frequency' => $frequency,
            'botlist' => $ua,
          ],
        ],
      ],
    ];
  }
}

/**
 * Implements template_preprocess_HOOK().
 */
function popup_survey_preprocess_popup_survey(&$variables) {
  // Skip this if the popup survey config entity to display is not set.
  if (empty($variables['survey_id'])) {
    $config = \Drupal::configFactory()->get('popup_survey.settings');
    $variables['survey_id'] = $config->get('popup_survey_config_entity');
  }

  if ($variables['survey_id'] != FALSE) {
    $current_language = \Drupal::languageManager()->getCurrentLanguage();
    \Drupal::languageManager()->setConfigOverrideLanguage($current_language);
    $popup_survey = \Drupal::entityTypeManager()->getStorage('popup_survey')->load($variables['survey_id']);
    if (!empty($popup_survey)) {
      $variables['cancel_link_title'] = $popup_survey->cancelLinkTitle();
      $variables['popup_body'] = $popup_survey->popupBody();
      $variables['popup_title'] = $popup_survey->label();
      $variables['survey_link'] = $popup_survey->surveyLink();
      $variables['survey_link_title'] = $popup_survey->surveyLinkTitle();
      $variables['render'] = TRUE;
    }
  }
}

/**
 * Implements hook_theme().
 */
function popup_survey_theme($existing, $type, $theme, $path) {
  return [
    'popup_survey' => [
      'variables' => [
        // By default don't render. Render if popup survey config entity exists.
        'render' => FALSE,
        'survey_id' => FALSE,
      ],
    ],
  ];
}
